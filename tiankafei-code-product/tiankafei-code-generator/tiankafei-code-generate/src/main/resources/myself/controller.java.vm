package $!{package.Controller};

import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
#if(${cfg.shiroAuthority})
import com.ruoyi.common.security.annotation.PreAuthorize;
#end
#if(${cfg.logFlag})
import com.ruoyi.common.log.annotation.Log;
import com.ruoyi.common.log.enums.BusinessType;
#end
#if($!{swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end

#if($!{restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
import $!{package.Entity}.$!{entity};
import $!{cfg.paramPackage}.$!{cfg.checkParamClassName};
import $!{cfg.paramPackage}.$!{cfg.countParamClassName};
import $!{cfg.paramPackage}.$!{cfg.deleteParamClassName};
import $!{cfg.paramPackage}.$!{cfg.pageParamClassName};
import $!{cfg.paramPackage}.$!{cfg.listParamClassName};
import $!{package.Service}.$!{table.serviceName};
import $!{cfg.voPackage}.$!{cfg.voClassName};
import $!{cfg.apiResultClassPath};
#else
import org.springframework.stereotype.Controller;
#end
#if($!{superControllerClassPackage})
import $!{superControllerClassPackage};
#end
import $!{cfg.idsParamClassPath};
import $!{cfg.pageClassPath};

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author $!{author}
 * @since 1.0
 */
#if($!{restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/$!{cfg.requestContext}")
#if($!{swagger2})
@Api(value = "$!{table.comment} API", tags = {"$!{table.comment}"})
#end
#if($!{kotlin})
class $!{table.controllerName}#if($!{superControllerClass}) : $!{superControllerClass}()#end

#else
#if($!{superControllerClass})
public class $!{table.controllerName} extends $!{superControllerClass} {
#else
public class $!{table.controllerName} {
#end

    @Autowired
    private $!{table.serviceName} $!{cfg.serviceConstName};

/**
 * 校验 $!{table.comment} 是否已经存在
 *
 * @param $!{cfg.checkParamConstName}
 * @return
 * @throws Exception
 */
	@PostMapping("/check")
#if($!{swagger2})
	@ApiOperation(value = "校验 $!{table.comment} 对象是否存在")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:check")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.CHECK)
#end
	public ApiResult<Boolean> check$!{table.controllerName}Exists(@Valid @RequestBody $!{cfg.checkParamClassName} $!{cfg.checkParamConstName}) throws Exception {
		Boolean flag = $!{cfg.serviceConstName}.check$!{table.serviceName}Exists($!{cfg.checkParamConstName});
		return ApiResult.ok(flag);
	}

/**
 * 保存 $!{table.comment}
 *
 * @param $!{cfg.voConstName}
 * @return
 * @throws Exception
 */
	@PostMapping
#if($!{swagger2})
	@ApiOperation(value = "添加 $!{table.comment}")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:add")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.INSERT)
#end
	public ApiResult<$!{cfg.keyColumnType}> add$!{table.controllerName}(@Valid @RequestBody $!{cfg.voClassName} $!{cfg.voConstName}) throws Exception {
		$!{cfg.keyColumnType} id = $!{cfg.serviceConstName}.add$!{table.serviceName}($!{cfg.voConstName});
		return ApiResult.ok(id);
	}

/**
 * 批量保存 $!{table.comment}
 *
 * @param $!{cfg.voConstName}List
 * @return
 * @throws Exception
 */
	@PostMapping("/batch")
#if($!{swagger2})
	@ApiOperation(value = "批量添加 $!{table.comment}")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:batchAdd")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.BATCH_INSERT)
#end
	public ApiResult<List<$!{cfg.keyColumnType}>> batchAdd$!{table.controllerName}(@Valid @RequestBody List<$!{cfg.voClassName}> $!{cfg.voConstName}List) throws Exception {
		List<$!{cfg.keyColumnType}> idList = $!{cfg.serviceConstName}.batchAdd$!{table.serviceName}($!{cfg.voConstName}List);
		return ApiResult.ok(idList);
	}

/**
 * 删除 $!{table.comment}
 *
 * @param id
 * @return
 * @throws Exception
 */
	@DeleteMapping("/{id}")
#if($!{swagger2})
	@ApiOperation(value = "删除 $!{table.comment}")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:delete")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.DELETE)
#end
	public ApiResult<Boolean> delete$!{table.controllerName}(@PathVariable(value = "id") String id) throws Exception {
		boolean flag = $!{cfg.serviceConstName}.delete$!{table.serviceName}(id);
		return ApiResult.ok(flag);
	}

/**
 * 批量删除 $!{table.comment}
 *
 * @param idsParam
 * @return
 * @throws Exception
 */
	@DeleteMapping("/batch")
#if($!{swagger2})
	@ApiOperation(value = "批量删除 $!{table.comment}")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:batchDelete")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.BATCH_DELETE)
#end
	public ApiResult<Boolean> batchDelete$!{table.controllerName}(@Valid @RequestBody IdsParam idsParam) throws Exception {
		boolean flag = $!{cfg.serviceConstName}.batchDelete$!{table.serviceName}(idsParam.getIds());
		return ApiResult.ok(flag);
	}

/**
 * 根据条件删除 $!{table.comment}
 *
 * @param $!{cfg.deleteParamConstName}
 * @return
 * @throws Exception
 */
	@DeleteMapping("/condition")
#if($!{swagger2})
	@ApiOperation(value = "条件删除 $!{table.comment}")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:conditionDelete")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.CONDITION_DELETE)
#end
	public ApiResult<Boolean> conditionDelete$!{table.controllerName}(@Valid @RequestBody $!{cfg.deleteParamClassName} $!{cfg.deleteParamConstName}) throws Exception {
		boolean flag = $!{cfg.serviceConstName}.conditionDelete$!{table.serviceName}($!{cfg.deleteParamConstName});
		return ApiResult.ok(flag);
	}

/**
 * 修改 $!{table.comment}
 *
 * @param $!{cfg.voConstName}
 * @return
 * @throws Exception
 */
	@PatchMapping
#if($!{swagger2})
	@ApiOperation(value = "修改 $!{table.comment}")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:update")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.UPDATE)
#end
	public ApiResult<Boolean> update$!{table.controllerName}(@Valid @RequestBody $!{cfg.voClassName} $!{cfg.voConstName}) throws Exception {
		boolean flag = $!{cfg.serviceConstName}.update$!{table.serviceName}($!{cfg.voConstName});
		return ApiResult.ok(flag);
	}

/**
 * 根据ID获取 $!{table.comment} 对象
 *
 * @param id
 * @return
 * @throws Exception
 */
	@GetMapping("/{id}")
#if($!{swagger2})
	@ApiOperation(value = "根据ID获取 $!{table.comment} 对象")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:info")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.INFO)
#end
	public ApiResult<$!{cfg.voClassName}> get$!{table.controllerName}(@PathVariable(value = "id") String id) throws Exception {
		$!{cfg.voClassName} $!{cfg.voConstName} = $!{cfg.serviceConstName}.get$!{table.serviceName}ById(id);
		return ApiResult.ok($!{cfg.voConstName});
	}

/**
 * 获取 $!{table.comment} 对象列表
 *
 * @return
 * @throws Exception
 */
	@GetMapping
#if($!{swagger2})
	@ApiOperation(value = "获取 $!{table.comment} 对象全部列表")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:AllList")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.ALL_LIST)
#end
	public ApiResult<List<$!{cfg.voClassName}>> get$!{table.controllerName}AllList() throws Exception {
		List<$!{cfg.voClassName}> $!{cfg.voConstName}List = $!{cfg.serviceConstName}.get$!{table.serviceName}List(new $!{cfg.listParamClassName}());
		return ApiResult.ok($!{cfg.voConstName}List);
	}

/**
 * 获取 $!{table.comment} 对象列表
 *
 * @param $!{cfg.listParamConstName}
 * @return
 * @throws Exception
 */
	@PostMapping("/list")
#if($!{swagger2})
	@ApiOperation(value = "获取 $!{table.comment} 对象列表")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:list")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.LIST)
#end
	public ApiResult<List<$!{cfg.voClassName}>> get$!{table.controllerName}List(@Valid @RequestBody $!{cfg.listParamClassName} $!{cfg.listParamConstName}) throws Exception {
		List<$!{cfg.voClassName}> $!{cfg.voConstName}List = $!{cfg.serviceConstName}.get$!{table.serviceName}List($!{cfg.listParamConstName});
		return ApiResult.ok($!{cfg.voConstName}List);
	}

/**
 * 获取 $!{table.comment} 分页对象列表
 *
 * @param $!{cfg.pageParamConstName}
 * @return
 * @throws Exception
 */
	@PostMapping("/pageList")
#if($!{swagger2})
	@ApiOperation(value = "获取 $!{table.comment} 分页对象列表")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:pageList")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.PAGE_LIST)
#end
	public ApiResult<Paging<$!{cfg.voClassName}>> get$!{table.controllerName}PageList(@Valid @RequestBody $!{cfg.pageParamClassName} $!{cfg.pageParamConstName}) throws Exception {
		Paging<$!{cfg.voClassName}> $!{cfg.voConstName}List = $!{cfg.serviceConstName}.get$!{table.serviceName}PageList($!{cfg.pageParamConstName});
		return ApiResult.ok($!{cfg.voConstName}List);
	}

/**
 * 计算 $!{table.comment} 总记录数
 *
 * @param $!{cfg.countParamConstName}
 * @return
 * @throws Exception
 */
	@PostMapping("/count")
#if($!{swagger2})
	@ApiOperation(value = "求 $!{table.comment} 对象的记录数")
#end
#if(${cfg.shiroAuthority})
	@PreAuthorize(hasPermi = "$!{cfg.authority}:count")
#end
#if(${cfg.logFlag})
	@Log(title = "$!{table.comment}", businessType = BusinessType.COUNT)
#end
	public ApiResult<Integer> count$!{table.controllerName}(@Valid @RequestBody $!{cfg.countParamClassName} $!{cfg.countParamConstName}) throws Exception {
		Integer count = $!{cfg.serviceConstName}.count$!{table.serviceName}($!{cfg.countParamConstName});
		return ApiResult.ok(count);
	}


}

#end