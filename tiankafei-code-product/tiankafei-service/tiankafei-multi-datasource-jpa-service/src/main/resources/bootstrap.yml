server:
  port: 7601
spring:
#  autoconfigure:
#    exclude:
#      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure
#      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
  profiles:
    active: dev, nacos
  redis:
    host: localhost
    port: 6379
    password: tiankafei
  application:
    name: multi-datasource-jpa-service
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
    show-sql: true
  datasource:
    primary:
      url: jdbc:mysql://localhost:3306/db-blog?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true
      username: root
      password: tiankafei
      type: com.alibaba.druid.pool.DruidDataSource
      #Spring Boot 默认是不注入这些属性值的，需要自己绑定
      #druid 数据源专有配置
      initialSize: 5
      minIdle: 5
      maxActive: 20
      maxWait: 60000
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      poolPreparedStatements: true

      #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入
      #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority
      #则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j
      filters: stat,wall
      maxPoolPreparedStatementPerConnectionSize: 20
      useGlobalDataSourceStat: true
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
    secondary:
      url: jdbc:mysql://localhost:3306/db-user?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true
      username: root
      password: tiankafei
      type: com.alibaba.druid.pool.DruidDataSource
      #Spring Boot 默认是不注入这些属性值的，需要自己绑定
      #druid 数据源专有配置
      initialSize: 5
      minIdle: 5
      maxActive: 20
      maxWait: 60000
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      poolPreparedStatements: true

      #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入
      #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority
      #则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j
      filters: stat,wall
      maxPoolPreparedStatementPerConnectionSize: 20
      useGlobalDataSourceStat: true
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      enabled: true
    shutdown:
      #可以远程关闭服务节点
      enabled: true
logging:
  level:
    ROOT: info
    # mapper sql日志的包路径
    org.tiankafei.multidatasource.jpa.primary.mapper: debug
    org.tiankafei.multidatasource.jpa.secondary.mapper: debug
    # db 工程的日志包路径
    org.tiankafei.db.mapper: debug
    org.tiankafei.db.service.impl: debug
    # nacos日志的包路径
    com.alibaba.nacos.client.naming: WARN
    # nacos日志的包路径
    com.alibaba.nacos.client.config.impl: WARN
    # eureka日志的包路径
    com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: WARN
    # spring自动装配日志的包路径
    org.springframework.boot.autoconfigure: ERROR
#################################### Swagger start #################################
# swagger配置
swagger:
  enabled: false
  title: jpa的多数据源服务接口文档
  license: Powered By ruoyi
  licenseUrl: https://tiankafei.top
  authorization:
    name: RuoYi OAuth
    auth-regex: ^.*$
    authorization-scope-list:
      - scope: server
        description: 客户端授权范围
    token-url-list:
      - http://localhost:8080/auth/oauth/token
#################################### Swagger end ###################################

#################################### tiankafei自定义配置 start #################################
tiankafei:
  tokenType: 1  # 从请求头中获取token信息
#  tokenType: 2  # 从cookies中获取token信息
#  tokenType: 3  # 从请求参数中获取token信息
#  tokenType: 4  # 从session中获取token信息（需要做session同步）
#################################### tiankafei自定义配置 end ###################################